\BOOKMARK [1][-]{section.1}{Kapitel 1}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{Einf\374hrung}{section.1}% 2
\BOOKMARK [3][-]{subsubsection.1.1.1}{Charakteristiken von C++}{subsection.1.1}% 3
\BOOKMARK [3][-]{subsubsection.1.1.2}{Entstehung von C++}{subsection.1.1}% 4
\BOOKMARK [3][-]{subsubsection.1.1.3}{Welches C++?}{subsection.1.1}% 5
\BOOKMARK [3][-]{subsubsection.1.1.4}{C++-Unterst\374tzung von Texas Instruments \(TI\)}{subsection.1.1}% 6
\BOOKMARK [3][-]{subsubsection.1.1.5}{Hello World!}{subsection.1.1}% 7
\BOOKMARK [3][-]{subsubsection.1.1.6}{C++-Compiler \(noch nicht Eclipse\)}{subsection.1.1}% 8
\BOOKMARK [2][-]{subsection.1.2}{Lexikalische Elemente von C++}{section.1}% 9
\BOOKMARK [3][-]{subsubsection.1.2.1}{Lexikalische Elemente}{subsection.1.2}% 10
\BOOKMARK [3][-]{subsubsection.1.2.2}{Styleguide: Bezeichner \(\037Namen\)}{subsection.1.2}% 11
\BOOKMARK [2][-]{subsection.1.3}{Typkonzept}{section.1}% 12
\BOOKMARK [3][-]{subsubsection.1.3.1}{Datentypen}{subsection.1.3}% 13
\BOOKMARK [3][-]{subsubsection.1.3.2}{\043define \(Kap. 4.5\)}{subsection.1.3}% 14
\BOOKMARK [2][-]{subsection.1.4}{Ausdr\374cke und Operatoren}{section.1}% 15
\BOOKMARK [3][-]{subsubsection.1.4.1}{Ausdr\374cke und Operatoren}{subsection.1.4}% 16
\BOOKMARK [2][-]{subsection.1.5}{Anweisungen}{section.1}% 17
\BOOKMARK [3][-]{subsubsection.1.5.1}{Anweisungen: ebenfalls nichts neues}{subsection.1.5}% 18
\BOOKMARK [2][-]{subsection.1.6}{Streams}{section.1}% 19
\BOOKMARK [3][-]{subsubsection.1.6.1}{Streamkonzept}{subsection.1.6}% 20
\BOOKMARK [3][-]{subsubsection.1.6.2}{Einsatz von Streams}{subsection.1.6}% 21
\BOOKMARK [3][-]{subsubsection.1.6.3}{Ausgabe: Klasse ostream}{subsection.1.6}% 22
\BOOKMARK [3][-]{subsubsection.1.6.4}{Eingabe: Klasse istream}{subsection.1.6}% 23
\BOOKMARK [3][-]{subsubsection.1.6.5}{Formatierte Ein- und Ausgabe}{subsection.1.6}% 24
\BOOKMARK [3][-]{subsubsection.1.6.6}{Format-Flags um \334berblick \(unvollst\344ndig\)}{subsection.1.6}% 25
\BOOKMARK [1][-]{section.2}{Kapitel 2: Funktionen}{}% 26
\BOOKMARK [2][-]{subsection.2.1}{Grundlegendes}{section.2}% 27
\BOOKMARK [3][-]{subsubsection.2.1.1}{Synonyme f\374r Funktionen}{subsection.2.1}% 28
\BOOKMARK [3][-]{subsubsection.2.1.2}{Aufgabe einer Funktion}{subsection.2.1}% 29
\BOOKMARK [3][-]{subsubsection.2.1.3}{Funktionen \(Vergleich zu C\)}{subsection.2.1}% 30
\BOOKMARK [3][-]{subsubsection.2.1.4}{Definition von Funktionen}{subsection.2.1}% 31
\BOOKMARK [3][-]{subsubsection.2.1.5}{Deklaration von Funktionen \(Funktionsprototypen\)}{subsection.2.1}% 32
\BOOKMARK [3][-]{subsubsection.2.1.6}{Kosten einer Funktion}{subsection.2.1}% 33
\BOOKMARK [2][-]{subsection.2.2}{C-Makro}{section.2}% 34
\BOOKMARK [3][-]{subsubsection.2.2.1}{C-Makro mit \043define}{subsection.2.2}% 35
\BOOKMARK [3][-]{subsubsection.2.2.2}{Beispiel mit C-Makro: Maximum zweier int-Werte}{subsection.2.2}% 36
\BOOKMARK [3][-]{subsubsection.2.2.3}{Beispiel mit C-Makro: Was passiert wirklich?}{subsection.2.2}% 37
\BOOKMARK [2][-]{subsection.2.3}{inline-Funktionen}{section.2}% 38
\BOOKMARK [3][-]{subsubsection.2.3.1}{inline-Funktionen: Grundlegendes}{subsection.2.3}% 39
\BOOKMARK [3][-]{subsubsection.2.3.2}{Beispiel mit inline-Code: Maximum zweier int-Werte}{subsection.2.3}% 40
\BOOKMARK [2][-]{subsection.2.4}{Grunds\344tze f\374r Optimierungen}{section.2}% 41
\BOOKMARK [2][-]{subsection.2.5}{default-Argumente}{section.2}% 42
\BOOKMARK [3][-]{subsubsection.2.5.1}{Vorbelegte Parameter \(default-Argumente\)}{subsection.2.5}% 43
\BOOKMARK [3][-]{subsubsection.2.5.2}{Beispiel: default-Argumente}{subsection.2.5}% 44
\BOOKMARK [3][-]{subsubsection.2.5.3}{Nutzen von default-Argumenten}{subsection.2.5}% 45
\BOOKMARK [2][-]{subsection.2.6}{Overloading}{section.2}% 46
\BOOKMARK [3][-]{subsubsection.2.6.1}{\334berladen von Funktionen \(overloading\)}{subsection.2.6}% 47
\BOOKMARK [3][-]{subsubsection.2.6.2}{Overloading in C++}{subsection.2.6}% 48
\BOOKMARK [3][-]{subsubsection.2.6.3}{Deklaration von \374berladenen Funktionen: Regeln}{subsection.2.6}% 49
\BOOKMARK [3][-]{subsubsection.2.6.4}{Funktionen sollen nur dann \374berladen werden, wenn ...}{subsection.2.6}% 50
\BOOKMARK [2][-]{subsection.2.7}{default-Parameter vs. Overloading}{section.2}% 51
\BOOKMARK [1][-]{section.3}{Kapitel 3: Pointer und Referenzen}{}% 52
\BOOKMARK [2][-]{subsection.3.1}{H\366here und strukturierte Datentypen}{section.3}% 53
\BOOKMARK [3][-]{subsubsection.3.1.1}{H\366here Datentypen}{subsection.3.1}% 54
\BOOKMARK [3][-]{subsubsection.3.1.2}{Strukturierte Datentypen}{subsection.3.1}% 55
\BOOKMARK [2][-]{subsection.3.2}{Pointer}{section.3}% 56
\BOOKMARK [3][-]{subsubsection.3.2.1}{Adresse}{subsection.3.2}% 57
\BOOKMARK [3][-]{subsubsection.3.2.2}{Pointer}{subsection.3.2}% 58
\BOOKMARK [3][-]{subsubsection.3.2.3}{Standarddarstellung von Pointern}{subsection.3.2}% 59
\BOOKMARK [3][-]{subsubsection.3.2.4}{Pointer und Datentyp}{subsection.3.2}% 60
\BOOKMARK [3][-]{subsubsection.3.2.5}{Definition einer Pointervariablen}{subsection.3.2}% 61
\BOOKMARK [3][-]{subsubsection.3.2.6}{Initialisierung mit Null-Pointer}{subsection.3.2}% 62
\BOOKMARK [3][-]{subsubsection.3.2.7}{Der Adressoperator \046 \(Referenzierung\)}{subsection.3.2}% 63
\BOOKMARK [3][-]{subsubsection.3.2.8}{Kopieren von Adressen}{subsection.3.2}% 64
\BOOKMARK [3][-]{subsubsection.3.2.9}{Der Inhaltsoperator * \(Dereferenzierung\)}{subsection.3.2}% 65
\BOOKMARK [3][-]{subsubsection.3.2.10}{Darstellung in graphischer Pointernotation}{subsection.3.2}% 66
\BOOKMARK [3][-]{subsubsection.3.2.11}{const bei Pointern: Vorsicht}{subsection.3.2}% 67
\BOOKMARK [3][-]{subsubsection.3.2.12}{void-Pointer}{subsection.3.2}% 68
\BOOKMARK [3][-]{subsubsection.3.2.13}{Pointer auf Funktionen}{subsection.3.2}% 69
\BOOKMARK [3][-]{subsubsection.3.2.14}{Interruptvektortabelle: Tabelle von Funktionspointern}{subsection.3.2}% 70
\BOOKMARK [3][-]{subsubsection.3.2.15}{Umsetzung von Funktionspointern in C/C++}{subsection.3.2}% 71
\BOOKMARK [3][-]{subsubsection.3.2.16}{Beispiel f\374r Funktionspointer}{subsection.3.2}% 72
\BOOKMARK [2][-]{subsection.3.3}{Referenzen}{section.3}% 73
\BOOKMARK [3][-]{subsubsection.3.3.1}{Was ist eine Referenz?}{subsection.3.3}% 74
\BOOKMARK [3][-]{subsubsection.3.3.2}{Syntax von Referenzen}{subsection.3.3}% 75
\BOOKMARK [3][-]{subsubsection.3.3.3}{Einsatz von Referenzen}{subsection.3.3}% 76
\BOOKMARK [3][-]{subsubsection.3.3.4}{Pointer und Referenzen auf lokale Variablen}{subsection.3.3}% 77
\BOOKMARK [2][-]{subsection.3.4}{Zeiger und Referenzen als Parameter und R\374ckgabewerte}{section.3}% 78
\BOOKMARK [3][-]{subsubsection.3.4.1}{Call by Value vs. Call by Reference}{subsection.3.4}% 79
\BOOKMARK [3][-]{subsubsection.3.4.2}{3 Beispiele}{subsection.3.4}% 80
\BOOKMARK [3][-]{subsubsection.3.4.3}{Call by reference: wann einsetzen?}{subsection.3.4}% 81
\BOOKMARK [3][-]{subsubsection.3.4.4}{Merke}{subsection.3.4}% 82
\BOOKMARK [1][-]{section.4}{Kapitel 4: Arrays, Dynamische Speicherverwaltung}{}% 83
\BOOKMARK [2][-]{subsection.4.1}{Arrays: Vektoren}{section.4}% 84
\BOOKMARK [3][-]{subsubsection.4.1.1}{Problemstellung}{subsection.4.1}% 85
\BOOKMARK [3][-]{subsubsection.4.1.2}{Der Array \(Feld, Vektor\)}{subsection.4.1}% 86
\BOOKMARK [3][-]{subsubsection.4.1.3}{Zugriff auf ein Arrayelement}{subsection.4.1}% 87
\BOOKMARK [2][-]{subsection.4.2}{Arrays und Pointer}{section.4}% 88
\BOOKMARK [3][-]{subsubsection.4.2.1}{Pro Memoria: Eindimensionales Array \(Vektor\)}{subsection.4.2}% 89
\BOOKMARK [3][-]{subsubsection.4.2.2}{\304quivalenz von Array- und Pointernotation}{subsection.4.2}% 90
\BOOKMARK [3][-]{subsubsection.4.2.3}{Vergleichen von Arrays}{subsection.4.2}% 91
\BOOKMARK [3][-]{subsubsection.4.2.4}{Arrayname ist ein nicht modifizierbarer L-Wert}{subsection.4.2}% 92
\BOOKMARK [3][-]{subsubsection.4.2.5}{Automatische Initialisierung von Arrays}{subsection.4.2}% 93
\BOOKMARK [3][-]{subsubsection.4.2.6}{Explizite Initialisierung von Arrays}{subsection.4.2}% 94
\BOOKMARK [3][-]{subsubsection.4.2.7}{Beispiel: Explizite Initialisierung von Arrays}{subsection.4.2}% 95
\BOOKMARK [3][-]{subsubsection.4.2.8}{Goodies f\374r die explizite Initialisierung}{subsection.4.2}% 96
\BOOKMARK [2][-]{subsection.4.3}{Mehrdimensionale Arrays}{section.4}% 97
\BOOKMARK [3][-]{subsubsection.4.3.1}{Initialisierung eines mehrdimensionalen Arrays}{subsection.4.3}% 98
\BOOKMARK [2][-]{subsection.4.4}{\334bergabe von Arrays und Zeichenketten}{section.4}% 99
\BOOKMARK [3][-]{subsubsection.4.4.1}{Beispiel: Array \(Vektor\) als Parameter}{subsection.4.4}% 100
\BOOKMARK [3][-]{subsubsection.4.4.2}{\334bergabe einer Matrix mittels offenem Array}{subsection.4.4}% 101
\BOOKMARK [3][-]{subsubsection.4.4.3}{Zeichenketten \(Strings\)}{subsection.4.4}% 102
\BOOKMARK [2][-]{subsection.4.5}{Dynamische Speicherverwaltung}{section.4}% 103
\BOOKMARK [3][-]{subsubsection.4.5.1}{Pro Memoria: Variablen}{subsection.4.5}% 104
\BOOKMARK [3][-]{subsubsection.4.5.2}{Dynamische Speicherverwaltung}{subsection.4.5}% 105
\BOOKMARK [3][-]{subsubsection.4.5.3}{Dynamische Speicherverwaltung: Syntax}{subsection.4.5}% 106
\BOOKMARK [3][-]{subsubsection.4.5.4}{Dynamische Speicherverwaltung: Vorsichtsmassnahmen}{subsection.4.5}% 107
\BOOKMARK [3][-]{subsubsection.4.5.5}{Memory Leak, Garbage Collection}{subsection.4.5}% 108
\BOOKMARK [3][-]{subsubsection.4.5.6}{Dynamische Allozierung von Arrays}{subsection.4.5}% 109
\BOOKMARK [3][-]{subsubsection.4.5.7}{Dynamische Allozierung von Matrizen}{subsection.4.5}% 110
\BOOKMARK [3][-]{subsubsection.4.5.8}{Dynamische Matrix mit 4 Zeilen und 3 Spalten}{subsection.4.5}% 111
\BOOKMARK [3][-]{subsubsection.4.5.9}{Zugriff auf dynamisch erzeugte Matrix}{subsection.4.5}% 112
\BOOKMARK [3][-]{subsubsection.4.5.10}{Dynamische Matrix freigeben}{subsection.4.5}% 113
\BOOKMARK [3][-]{subsubsection.4.5.11}{Effizienz der Matriximplementationen}{subsection.4.5}% 114
\BOOKMARK [1][-]{section.5}{Kapitel 5: Scope, Deklarationen, Type Casts}{}% 115
\BOOKMARK [2][-]{subsection.5.1}{Strukturen}{section.5}% 116
\BOOKMARK [3][-]{subsubsection.5.1.1}{Strukturen in C++}{subsection.5.1}% 117
\BOOKMARK [2][-]{subsection.5.2}{G\374ltigkeitsbereiche, Namensr\344ume und Sichtbarkeit}{section.5}% 118
\BOOKMARK [3][-]{subsubsection.5.2.1}{G\374ltigkeitsbereiche von Namen \(Scope\)}{subsection.5.2}% 119
\BOOKMARK [3][-]{subsubsection.5.2.2}{G\374ltigkeitsbereiche in C++}{subsection.5.2}% 120
\BOOKMARK [3][-]{subsubsection.5.2.3}{G\374ltigkeit \(Scope\) von Variablen}{subsection.5.2}% 121
\BOOKMARK [3][-]{subsubsection.5.2.4}{Lebensdauer von Variablen}{subsection.5.2}% 122
\BOOKMARK [3][-]{subsubsection.5.2.5}{Sichtbarkeit von Variablen}{subsection.5.2}% 123
\BOOKMARK [3][-]{subsubsection.5.2.6}{Schlussfolgerung \(naheliegend aber falsch\)}{subsection.5.2}% 124
\BOOKMARK [3][-]{subsubsection.5.2.7}{Lebensdauer \(grau\) und Sichtbarkeit \(weiss\)}{subsection.5.2}% 125
\BOOKMARK [3][-]{subsubsection.5.2.8}{Codierstil}{subsection.5.2}% 126
\BOOKMARK [2][-]{subsection.5.3}{Namensr\344ume \(Namespaces\)}{section.5}% 127
\BOOKMARK [3][-]{subsubsection.5.3.1}{Namensr\344ume}{subsection.5.3}% 128
\BOOKMARK [3][-]{subsubsection.5.3.2}{Explizite Namensr\344ume in C++}{subsection.5.3}% 129
\BOOKMARK [3][-]{subsubsection.5.3.3}{C++-Mechanismen f\374r Namespaces}{subsection.5.3}% 130
\BOOKMARK [3][-]{subsubsection.5.3.4}{Deklaration von Namespaces}{subsection.5.3}% 131
\BOOKMARK [3][-]{subsubsection.5.3.5}{Deklaration von Namespaces: Beispiel}{subsection.5.3}% 132
\BOOKMARK [3][-]{subsubsection.5.3.6}{using-Deklaration}{subsection.5.3}% 133
\BOOKMARK [3][-]{subsubsection.5.3.7}{using-Direktive}{subsection.5.3}% 134
\BOOKMARK [3][-]{subsubsection.5.3.8}{using namespace kann zu Konflikten f\374hren}{subsection.5.3}% 135
\BOOKMARK [3][-]{subsubsection.5.3.9}{Namenlose Namespaces}{subsection.5.3}% 136
\BOOKMARK [3][-]{subsubsection.5.3.10}{Zugriff auf globale Variable mit Scope-Operator}{subsection.5.3}% 137
\BOOKMARK [2][-]{subsection.5.4}{Speicherklassen}{section.5}% 138
\BOOKMARK [3][-]{subsubsection.5.4.1}{Speicherklassen in C++}{subsection.5.4}% 139
\BOOKMARK [3][-]{subsubsection.5.4.2}{Speicherklasse static: Variablen}{subsection.5.4}% 140
\BOOKMARK [3][-]{subsubsection.5.4.3}{Speicherklasse static: Funktionen}{subsection.5.4}% 141
\BOOKMARK [3][-]{subsubsection.5.4.4}{Speicherklasse extern: Externe Variablen}{subsection.5.4}% 142
\BOOKMARK [3][-]{subsubsection.5.4.5}{Typqualifikationen \(Kap. 9.2.2\)}{subsection.5.4}% 143
\BOOKMARK [3][-]{subsubsection.5.4.6}{Funktionsattribute}{subsection.5.4}% 144
\BOOKMARK [2][-]{subsection.5.5}{Typdefinitionen}{section.5}% 145
\BOOKMARK [3][-]{subsubsection.5.5.1}{typedef zur Vereinbarung eigener Datentypen}{subsection.5.5}% 146
\BOOKMARK [3][-]{subsubsection.5.5.2}{Beispiel}{subsection.5.5}% 147
\BOOKMARK [3][-]{subsubsection.5.5.3}{Gew\344hrleistung von Portabilit\344t}{subsection.5.5}% 148
\BOOKMARK [3][-]{subsubsection.5.5.4}{Wie setzt der Compiler ein typedef um?}{subsection.5.5}% 149
\BOOKMARK [2][-]{subsection.5.6}{Initialisierung}{section.5}% 150
\BOOKMARK [2][-]{subsection.5.7}{Type-Case \(Typumwandlungen\)}{section.5}% 151
\BOOKMARK [3][-]{subsubsection.5.7.1}{Typumwandlungen im Allgemeinen}{subsection.5.7}% 152
\BOOKMARK [3][-]{subsubsection.5.7.2}{Implizite Typumwandlung}{subsection.5.7}% 153
\BOOKMARK [3][-]{subsubsection.5.7.3}{Explizite Typumwandlung}{subsection.5.7}% 154
\BOOKMARK [3][-]{subsubsection.5.7.4}{Explizite Typumwandlung \0431, 2: C-Stil und Funktionsstil}{subsection.5.7}% 155
\BOOKMARK [3][-]{subsubsection.5.7.5}{Typumwandlung mit C-Stil und Funktionsstil}{subsection.5.7}% 156
\BOOKMARK [3][-]{subsubsection.5.7.6}{Explizite Typumwandlung \0433: const\137cast}{subsection.5.7}% 157
\BOOKMARK [3][-]{subsubsection.5.7.7}{Explizite Typumwandlung \0434: static\137cast}{subsection.5.7}% 158
\BOOKMARK [3][-]{subsubsection.5.7.8}{Explizite Typumwandlung \0435: dynamic\137cast}{subsection.5.7}% 159
\BOOKMARK [3][-]{subsubsection.5.7.9}{Explizite Typumwandlung \0436: reinterpret\137cast}{subsection.5.7}% 160
\BOOKMARK [1][-]{section.6}{Kapitel 6: Module und Datenkapseln}{}% 161
\BOOKMARK [2][-]{subsection.6.1}{Modul \(Unit\)}{section.6}% 162
\BOOKMARK [3][-]{subsubsection.6.1.1}{Motivation}{subsection.6.1}% 163
\BOOKMARK [3][-]{subsubsection.6.1.2}{Nomenklatur: Modul vs. Unit}{subsection.6.1}% 164
\BOOKMARK [3][-]{subsubsection.6.1.3}{Ziele der Modularisierung}{subsection.6.1}% 165
\BOOKMARK [3][-]{subsubsection.6.1.4}{Eigenschaften einer Unit \(eines Moduls\)}{subsection.6.1}% 166
\BOOKMARK [3][-]{subsubsection.6.1.5}{Bestandteile eine C++-Programms}{subsection.6.1}% 167
\BOOKMARK [3][-]{subsubsection.6.1.6}{Unitkonzept}{subsection.6.1}% 168
\BOOKMARK [2][-]{subsection.6.2}{Geheimnisprinpzip \(Information Hiding\)}{section.6}% 169
\BOOKMARK [3][-]{subsubsection.6.2.1}{Information Hiding}{subsection.6.2}% 170
\BOOKMARK [3][-]{subsubsection.6.2.2}{Konzept der Datenkapsel}{subsection.6.2}% 171
\BOOKMARK [3][-]{subsubsection.6.2.3}{Beispiel f\374r Datenzugriff bei Datenkapsel}{subsection.6.2}% 172
\BOOKMARK [3][-]{subsubsection.6.2.4}{Beispiel f\374r Unit Rechteck \(ohne Datenkapsel\)}{subsection.6.2}% 173
\BOOKMARK [3][-]{subsubsection.6.2.5}{Beispiel f\374r Unit Rechteck: Verbesserung \0431}{subsection.6.2}% 174
\BOOKMARK [3][-]{subsubsection.6.2.6}{Beispiel f\374r Unit Rechteck: Verbesserung \0432}{subsection.6.2}% 175
\BOOKMARK [3][-]{subsubsection.6.2.7}{Unit nutzen}{subsection.6.2}% 176
\BOOKMARK [3][-]{subsubsection.6.2.8}{Unit-Schnittstelle definieren \(in Headerdatei\)}{subsection.6.2}% 177
\BOOKMARK [3][-]{subsubsection.6.2.9}{Deklarationsreihenfolge in der Headerdatei \(*.h\)}{subsection.6.2}% 178
\BOOKMARK [3][-]{subsubsection.6.2.10}{Reihenfolge in der Implementierungsdatei \(*.cpp\)}{subsection.6.2}% 179
\BOOKMARK [3][-]{subsubsection.6.2.11}{\043include-Konzept}{subsection.6.2}% 180
\BOOKMARK [3][-]{subsubsection.6.2.12}{Unit compilieren}{subsection.6.2}% 181
\BOOKMARK [3][-]{subsubsection.6.2.13}{Units linken}{subsection.6.2}% 182
\BOOKMARK [3][-]{subsubsection.6.2.14}{Buildprozess}{subsection.6.2}% 183
\BOOKMARK [2][-]{subsection.6.3}{Make-Tool}{section.6}% 184
\BOOKMARK [3][-]{subsubsection.6.3.1}{Abh\344ngigkeiten zwischen Dateien}{subsection.6.3}% 185
\BOOKMARK [3][-]{subsubsection.6.3.2}{make-File}{subsection.6.3}% 186
\BOOKMARK [3][-]{subsubsection.6.3.3}{Beispiel: makefile}{subsection.6.3}% 187
\BOOKMARK [1][-]{section.7}{Kapitel 7: Eclipse IDE}{}% 188
\BOOKMARK [2][-]{subsection.7.1}{Eclipse}{section.7}% 189
\BOOKMARK [2][-]{subsection.7.2}{Workspace}{section.7}% 190
\BOOKMARK [3][-]{subsubsection.7.2.1}{Ressourcen \(Resources\)}{subsection.7.2}% 191
\BOOKMARK [3][-]{subsubsection.7.2.2}{Project}{subsection.7.2}% 192
\BOOKMARK [2][-]{subsection.7.3}{Debugger}{section.7}% 193
\BOOKMARK [3][-]{subsubsection.7.3.1}{Testen und Debugging}{subsection.7.3}% 194
\BOOKMARK [3][-]{subsubsection.7.3.2}{Funktionen eines Debuggers}{subsection.7.3}% 195
\BOOKMARK [3][-]{subsubsection.7.3.3}{Assertions \(Zusicherungen\)}{subsection.7.3}% 196
\BOOKMARK [3][-]{subsubsection.7.3.4}{Zu beachten bei Assertions}{subsection.7.3}% 197
